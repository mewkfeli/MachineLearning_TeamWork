# app.py
import streamlit as st
import requests
import pandas as pd
import numpy as np
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    page_icon="üè†",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("""
<div style="text-align: center; padding: 20px;">
    <h1 style="color: #1976d2;">üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
    <p><b>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b></p>
</div>
""", unsafe_allow_html=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.sidebar.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
size = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å (–º¬≤)", min_value=10, max_value=1000, value=80, step=1)
room_count = st.sidebar.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", [1, 2, 3, 4, 5, 6], index=1)
building_age_numeric = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è (–ª–µ—Ç)", 0, 50, 5)

# –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
st.sidebar.subheader("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
floor_no = st.sidebar.number_input("–≠—Ç–∞–∂", min_value=-2, max_value=50, value=3, step=1)
total_floor_count = st.sidebar.number_input("–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –∑–¥–∞–Ω–∏—è", min_value=1, max_value=50, value=5, step=1)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
days_on_market = st.sidebar.slider("–î–Ω–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ", 0, 365, 30)
heating_type = st.sidebar.selectbox(
    "–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è",
    options=[
        ("–ù–µ—Ç", 0), ("–°–æ–±–∞ (–£–≥–æ–ª—å)", 1), ("–°–æ–±–∞ (–ì–∞–∑)", 2),
        ("–ö–∞–ª–æ—Ä–∏—Ñ–µ—Ä (–£–≥–æ–ª—å)", 3), ("–ö–∞–ª–æ—Ä–∏—Ñ–µ—Ä (–ì–∞–∑)", 4),
        ("–ö–∞–ª–æ—Ä–∏—Ñ–µ—Ä (–¢–æ–ø–ª–∏–≤–æ)", 5), ("–ö–æ–º–±–∏ (–ì–∞–∑)", 6),
        ("–ö–æ–º–±–∏ (–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ)", 7), ("–ö–∞—Ç –ö–∞–ª–æ—Ä–∏—Ñ–µ—Ä", 8),
        ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", 9), ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å —Ç–µ–ø–ª–∞)", 10),
        ("–¢–µ–ø–ª—ã–π –ø–æ–ª", 11), ("–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", 12), ("–§–∞–Ω–∫–æ–π–ª", 13),
        ("–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", 14), ("–ì–µ–æ—Ç–µ—Ä–º–∞–ª—å–Ω–∞—è", 15)
    ],
    format_func=lambda x: x[0]
)[1]

# URL API (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
API_URL = "http://localhost:8000"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç API
def get_predictions(data: Dict[str, Any]) -> Dict[str, Any]:
    try:
        response = requests.post(f"{API_URL}/predict", json=data, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.ConnectionError:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return None
    except requests.exceptions.Timeout:
        st.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
        return None
    except Exception as e:
        st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return None


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
if st.sidebar.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", type="primary"):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    input_data = {
        "total_floor_count": total_floor_count,
        "floor_no": floor_no,
        "room_count": room_count,
        "size": size,
        "building_age_numeric": building_age_numeric,
        "days_on_market": days_on_market,
        "heating_type": heating_type
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
        predictions = get_predictions(input_data)

    if predictions:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞")
            price = predictions.get("predicted_price", 0)
            st.metric(
                label="–¶–µ–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                value=f"{price:,.0f} ‚Ç∫",
                delta=None
            )

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ
            price_per_sqm = price / size if size > 0 else 0
            st.info(f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_sqm:,.0f} ‚Ç∫")

        with col2:
            st.subheader("üè∑ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
            subtype = predictions.get("predicted_subtype", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            subtype_mapping = {
                0: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ (Flat)",
                1: "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å (Rezidans)",
                2: "–í–∏–ª–ª–∞ (Villa)",
                3: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–æ–º (M√ºstakil Ev)",
                4: "–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤ (Kooperatif)",
                5: "–ö–æ–º–ø–ª–µ–∫—Å –∑–¥–∞–Ω–∏–π (Komple Bina)",
                6: "–î–∞—á–∞ (Yazlƒ±k)",
                7: "–°–±–æ—Ä–Ω—ã–π –¥–æ–º (Prefabrik Ev)",
                8: "–û—Å–æ–±–Ω—è–∫/–î–≤–æ—Ä–µ—Ü/–í–æ–¥–Ω—ã–π –¥–æ–º (K√∂≈ük / Konak / Yalƒ±)",
                9: "–§–µ—Ä–º–µ—Ä—Å–∫–∏–π –¥–æ–º (√áiftlik Evi)",
                10: "–í–æ–¥–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ (Yalƒ± Dairesi)",
                11: "–õ–æ—Ñ—Ç (Loft)"
            }
            subtype_name = subtype_mapping.get(subtype, f"–¢–∏–ø {subtype}")
            st.metric(
                label="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
                value=subtype_name,
                delta=None
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.subheader("üìä –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞")
        col3, col4 = st.columns(2)

        with col3:
            st.write("**–í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            st.json(input_data)

        with col4:
            st.write("**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:**")
            st.json(predictions)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        chart_data = pd.DataFrame({
            '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['–ü–ª–æ—â–∞–¥—å', '–ö–æ–º–Ω–∞—Ç—ã', '–≠—Ç–∞–∂', '–í–æ–∑—Ä–∞—Å—Ç'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [size, room_count, floor_no, building_age_numeric]
        })
        st.bar_chart(chart_data.set_index('–ü–∞—Ä–∞–º–µ—Ç—Ä'))

    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.")

else:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    st.info("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'")

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìù –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    st.markdown("""
    - **–ü–ª–æ—â–∞–¥—å**: 85 –º¬≤
    - **–ö–æ–º–Ω–∞—Ç—ã**: 3 (2+1)
    - **–≠—Ç–∞–∂**: 3 –∏–∑ 5
    - **–í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è**: 10 –ª–µ—Ç
    - **–î–Ω–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ**: 45
    - **–û—Ç–æ–ø–ª–µ–Ω–∏–µ**: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ (–≥–∞–∑)
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è –û –º–æ–¥–µ–ª—è—Ö")
st.sidebar.markdown("""
**–ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:**
- **–†–µ–≥—Ä–µ—Å—Å–∏—è**: StackingRegressor
- **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è**: StackingClassifier
- **–¢–æ—á–Ω–æ—Å—Ç—å**: –í—ã—Å–æ–∫–∞—è
""")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666;">
    <p><b>–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∫—É—Ä—Å–∞ "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ" üìä</b></p>
    <p>–ú—É—Ö–∏—Ç–æ–≤–∞ –ê–∑–∞–ª–∏—è, –ö–∞—Å–ø—Ä–∞–Ω–æ–≤ –ö–∞–º–∏–ª—å ‚Äî 22–ü-2</p>
</div>
""", unsafe_allow_html=True)
